%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 21E258) Quartz PS Context)
%%Title: Synth_ABEN.eps
%%Creator: ChemDraw(tm) 19.0.1.32
%%CreationDate: 2022-04-05 05:20:58 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 222 80
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2019 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 222 80
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: YHDLCX+SFCompactRounded-Regular
%!FontType1-1.0: YHDLCX+SFCompactRounded-Regular 1.0%%CreationDate: 4/5/22% Copyright 2022 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SFCompactRounded Regular) readonly def/FamilyName (SFCompactRounded) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /YHDLCX+SFCompactRounded-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /N putdup 34 /H putdup 35 /two putdup 36 /Z putdup 37 /n putdup 38 /I putdup 39 /slash putdup 40 /E putdup 41 /t putdup 42 /O putdup 43 /zero putdup 44 /period putdup 45 /space putdup 46 /m putdup 47 /o putdup 48 /l putdup 49 /d putdup 50 /hyphen putdup 51 /three putdup 52 /i putdup 53 /parenleft putdup 54 /parenright putreadonly def/FontBBox {-751 -1149 5190 2515} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF17DB2CDF4F5641AC75E4A52D97B404CA4C2267A4FAED8E1B923AD280442798083FF5DCCAB3BBC97ABB54A1B9E81C83462C9BB91ACF52AD25025EA07F0F75FDEA37C1B3135D67E65A74FD8D1885E9F914F7E5E01E883999F2E2E72B06D216BFFC658EE21BCAF8EC95C4C885F01FE7955AC314D4C683B432453DD7EDEDF4AC3DE60781EBA82E9D529D07894D242964D4EE2F22A798875673D7EB014DAD260990CCA43AD43A5F169FF1F0553B56946630F8B4B6131B945F88D771D24C2C13BE8460E63F2CB7394641F18D71C5287FD4D56E96417FE75ED456F5C67A2D6FE5C0B00446B86AAF85FAB9122A5D48EDE32985B1B0D3C82DCCA38C5276AB0158E1C87C91040DF1AD89C93E524562A468B64D57DD87E5B7112270DD9154DE9A95993DD518AD4F6DF1A0421A1B248D249A94C3AF2D0CD04A3E6C8665512484C2B70228106668C49547314F4D87E816A0A9446A25C320AFD13D49EBDE0A6F4A83A8F47E6FA71FCB09DA4E15C61ADBDAE25837EE6258CD328FC855841AC354642F3CBA82695A295EC6B0057E8E838FF231C239886E5BAD32C362DB80C4343B68B6BC4A59CD67C3B5FE7B4EB2C504ACDF700BA29EC86E194397BB9D494EFFDCE1873D370C55601CA2CD0F0738CA56498AC78EBFD9652A80010B2FCCCDB64D9BD92D12725311950F669819CEB04744599E236DE32C58C0FDCF88BE75D51648F2DB1D19F281EA036997F10B41B8FD7DB049654D7E5E2AC22A8BC8120C09B93A66C36706AFFB8B8BEF8610708762E9271E9B26EC912E3C726B138DE37653AA9D0DBAE269DC84A77BB5055125E0B9C4E410E75B825E46ADBB3AF10F09279087D47D3F942EA7C22CC6A8CB271C2D63D25C59B6B1890F1978CC18153836278621950559B1AAFC04DF2803158D404870424C49F6512E2563E40D326B739D8D1D2D8716E04A34BDA0B8D3F992D74078D0D20C59FA2FE579112AC2874F3892EC851FCBA0B36169CFF38A5EFD3D8A9AE2AB9FE0AD2E73E6CA920BA668CC3DA1B14E6418DF1F6DE765B0C7B6F23EC862CDEDF2E3B4B8842DAC91A0E0265683B388CCF91003300239122D460FA76624545E021931C5F2CF27C7B325C1E513DF205A0E687F26390F69A95463A602FB254418FF62E748549310B266A2865798655BE70B217E49320377C02DD63CAD5C4943680A8FFF0CAB3A55341DA4490CB37CD5E876D25B92832C474320DE13F1D1C1DFC8FA3EF06320718F741605A225E686EDEF906B981070AF0E7460F4FF55116EDF60462676D2DCD4EAD4F2A7E618FDDD624E78F40B20C60D37B210FA6AB55D0A2B20CF3A15A2198A5A4FA1E721F4E6A9776A9959845FFE027EFC6C525012B81657C36AC2E2B4666524D8B74D5C9F4A5B792E01D63E603A91E9874D062B343A23132691B881CFF5757248C4748B76D95118B9B615C9F731122E1A279DE16BA37DF84048FE5248B5B185B24EF1183ACB452287EE00DDCEA66CDA2E4219BA108DD8DB2530600F8B5A120D74D135770E30A9C8ACC212EEF5D972FAFDCAFF06A5809FFBA33AA3E47390104283948B92CBDF0F398E6C82663EEECC6AEE0003C7B938E11D14AE8D28F53D38456D567BF293B24ABE272C961A443B4FFF4168377FB1AF8DE0E73EF07C12B3F41287EE4C39275B48279FC913074580A53BFABBE376808F007BBA008FFB37F80B7F909C7E0C30A3A3F61ADF8F87EB07322698F20FCCA2B38FE116363937B8D95239CAE438FA778D7CBAC5E0EF5199F615F14DF8E2C29F0E7D2A5E3512273D0256C7A5E5FDC97790DC86F6469315FF21075CABC9D5D413850B590B9843E730F598296D6B65002C01F0D65B1A9B82246C7F840E6EBC0A6F87EC8EFAC59CB8E3103821496783F655F70D344354E9BE82644DA29F17F5F860BFB42D5C09165FEEE7F04756C5E09C99950D795C41D28DCB03F794407033832C2CD1F1E957D9745D1F15B48BE1F674B367E93FE78D633CD57C634FE13B8DEACDCC50D39AA51884F28565DDC6988BC51637BDC5D4308FA3895567D9FFC18FD158DF5A227A01ED10B73990724D719F325B1D516CB9C38B827CB6928B82953292BB879FB81494A3B68B5097488B3E791B18EBB4306512E86E8AF7C921B72DADC2B31B729FAFDDA4521869438DA79220E0FC88BCCD73936343F92D8C9E189994D4907FFAA44393FADD58891081F78B30917F2521E801C8495F92DDB9E7759CD27A8A774C55CEB5B0C02040FE2A57CB7AF766FE0F063E38065FD0B3A5AF011B60E4D28F0098DC799DA08C94B2DBE7623B12AB6A44471339FE4C088FFD7CD20743E19046A2508DCE791F5CEE32855FA9A27D6B3746C13F85959138F58FF98D05E0E5381BA77550810D360BB92D55008BD8644D95DCA6FF3ABAF92E7189F60937BE3A46F7148C0282B888A5CA9C269D1114E31D3AE5269B1B68AD16F77BFE9DBA5AF05A05843B73F0F26F73F2D05241E3A8267B8C8A652B1502881B4FA030C3367C88867BB40730C589D879693339E6A95DF7E88C29324D1579D9A8D30AC8A1E2EB68533EA7954869FD1729CDA6DCA036718D8E379C00445E83CBFAB86603B9CA44561538987603D070B2033D29D303B38F5958D6FE7FFC6200DF69D1E37DC5EDB422E538FCF13B59C522C5AAB874C0C01C1FE761E7B2112F178FF47F1B79E155C39C0C40DBF8B89D24A0DDD2DD17A33396A78A4B426344B3C9F0387A5F1833D04774C8539255EFDA11B6681E81EA41E861371040B8E1E0436063F40785390559E4F6303285D4406617A6E5B076694F3864B5E838116D2642D047F2E52CF24232FDD5CA5F91E229FAE360ACCA2246C1FB3402F8C3F6FA40DAD1D7DA4A7A1BB4F2031CC3D63F985D847EC2054432D3D7D5089DF31D92B69A6551DEAE955AE3D1B716C141255C94F632F65E9A5175A2EAA40A31323B6F377D7FDA75D65C107427497E3180E9AEEB4DA9BC8DD817CDC4503C22099B3E57BB1DA0CED603DAEF51D8D94913122B680A38F0490EFDC3D9AC63F795BE64F0165D2938F24D89B9E8003702F0B3AA8586308D98F5B1C80CA4437864D8395F357081763B0CE73938B093F46FF3CF5E6913D18E905087C0B12275C584CE6BE71356837686D1FB735F27079732FDF47095A0A6055944B1B9F8361732A1F1720DD15474FCEF01FF9EC21455B1281A123345997E574E8686E32A265674998F02779564548BAEFF998C42AEE13F76B6A6619A1439C4E18F4772B387B9170B47BE284C3F959E434C4F191A02EB2295FC8971A5F0C8312BFFF9EB665D2F2DFE91E1B15A6AC632C862EF019618B155DA7A43BA0097483D18E90639FAAFA6F69CD3B717EDA2980B6116C2D85FB55964B3A2BA7D49C2F904D196459C568CC3F44FF84E3CD542C9CCB8BC22678B71F1ECA36171C09D8B794B9878CA0C884EE83E0DF128B3D2AEC4822FC876D72A8A6164825FF4A01C74892C28DF255C644A2A111CF052E60AFADA56DA3CA7CE48ADCDA9014E6E273E49D3C3D2D7F0FFAC63323DE0CEF78D7A8D4A0E8FF5BCEE80BA095AD3E42DE96C50C8D29170DD38EA70A4F1768AD1B89443AC92FB503AE09D12E060B489EB50FF4418721FB8B0F2984DEF090F57BF19E5F565BCB2110982178EDBA832726C7F2D44D91A6E096C7A198BF4B083156973A1FF5F98B5810283B00ECA0AD36E0A2F8562D27FDBF59DF3CDE378E5A993604E6DBF5CAEA137DEDDB9B8953D84E80987C60C8091A67C4FCA7199CCDD27A1BDEE4EC05F54432E850F23898DC7EB1E3F3E5A28F44391982BA36996F23527B30FA3CA6A674588B5A97557F88C906279B40D7D1E7022219DF430BCE261E609549E28A26F64C991C5B1DFABC059A44965C60F061D52F823BF32288FB6D8630CC82247D153C9D48B61E1BF7BE9BC5141B7056E03A7A9BE5F000FB5663C395ECF0B9DF689ECC8761AA9EA64B3FD0D1D0A7B6F31ED3FF090D3C55B8BD2DE14AE8FB426E1936A21ACD8E5F6E5453507919E1862BF5809B81438931A535933DE99DF62208C1F9B79EEF1D2D814C375A4A01865E26DB45DA73A1B0A9C31142DA7CC17F850470A5BC24B8392D78ABC3AF58A980F60DE900B00E050E4A199A228AAD59999E74DFFACCF7D3412B466F6C3BF9818D467638A968953F09148F136A3B8AD381231701E6A2C8973775931A8149C90EBB4E4EAA046EB448EBB0BA4945EF71A344C37494197DB3B143DFC33407344D10BCA5CA1D67E4EB80ED78EE07162A2FE2F98F4B3565B0A589E4D952CD6728AA867C240DD79B960D3110661E1E9C43BA815010D023563B74B4990D0229870030C62AC88936C3C34D3C9D617C3E696877896F54582EA274F32DDCB96295DBA8BA6FAD260A71766FBAA4865CACCB938D96A7F35884B2F80DE838A532F64A69274B1E648E6B69BD591F7097A311CE0535C3E6AC15FD550829417C280BA7B18F559B22A930D750F7E283436698D59E1CC6316D6150D41C7BFC12369183A561AFC49754AAEF51BBB2701E4D62CF2AEFCBFFAFCBBE6E9E03FCCCC5804A069E6F28E4EC33E36DE4863F8D92F46D09CD039FA2F6FD542A9F344413D117B481A37EC36D87DDD784EA2C362965717760A0D277C72886FA67DC36588569F58394CA23D9A80D4CC50FCFF208FFA674CB3705F2426695085DC11F3187544352473F69B89923BC0DA54E7EF2AFFA856D4155A6904E954E308186CE3E027ADD06223371FB0D311C9AA04EE8815A357C9A29D7504783F95F3005DCC6776DC094B2A141E4DFC14C61BCE338A5A07A13094A63679350F70E839655A28E9F8D3DF8C3C5CBEDC0C587095D7EB17D76E471A6DB4661DEE743F056F75C06EBEF13D1E276121ADEF92FAC6FF1E021BE89584ED682F0B2006156F0F042A6A6B78C7DA3B02943AF973457BE6790141D0B0EDBE65B7E5B5A5DA9442DDC17E3CF5688EB817FF519A3EBA99E7C59B08B566DDC91E3264F949E0A7ACA188CCE38CE0929AD510DD9A6D4A53A1C1CB288021E2FA9A076B97375A16D564205AC3160FB5505FD2379625AFAF6A547CDC9FE5F1B8486B9D58163545F206C16BD5EC2FBB7E1BB3652BDF1CD51E127AE18F73C70DDE2AE4C054AEAB2BC866998D6D4EF72D221AC0AD086F6B573B17DDCA8CE84EA12F6761F1AD35F224E881568E98BF71A2E566F55C71C57BC487FC16B3EB69AB800201C5DFD431EE79FAA212858E077502204B9C963A8D4744F08AA202464ACF559E381793E420FDF57379969B67157CD783ADA94A06774E035DD0C9BD96C0F639FC2B6056565799D1076D9BBB62E4C6921B8BA32C767333C394BD24F80E3EE0E02A8FBACA739D740A93F0CD72E16309FF55D206C584B7257F087ECFF4247B24A40667481D6A5B96A9566CEFC4E12AD5E1776C7A4A5D4F72ED4823E342E0A507B302DFC7D2AAB04CDAFCA58C2A460F737E6EBE78B3C701F853A77C316C61C7A651FDC01E73A0521B2DFBC20736BFFAC793113882B7A9C93FEB7D3D56BD507A3D7B68BD8DDFDF78E36DCAC9997B429E0FB8554B3C1271A8A95D18AB5C12EAF1F314BDC279F2D201D991F318ADE936F02AC54DA8AA72F0CD5A72514D276C1D50B71B3A5FD31DE1B187B8A7CFDE2A9250A5AC26804F4B067D92DC8C19B2A2E70759D540B48FD3FDB11614D40A1B6065795E6486E63E65822CADDDF9CD648B1B0EF53CBCF1655206C5AD54DE1DBEAF7F6717A968B9E0E280909BD3AD2859CCF34AA42D33E45716D5FAE65E6E83D057088920E7AFDF2057202EFAAE61565F9F463D9BB21D7DF649F6FF1B07489B20D34EA4CE17C6837E6A870F58612449BD463CBE3099B211EEAA65863B77ECAC0763CD6B37531C51D295F0F26084984EE383F8426E7BDE7549D6F5FC25AF79C5BE6BCE63CD4A91D1AE0345D8FC80DA85CA84AFDA975400525B4E606D80D8FA5ACA4E96F26ABB0125D2685E1BD5427314DDDEA4A23C82F28564D761F3506217C85E957C81A64FCD686E9F3CF2D30A429744E5075AC4674D49204BB43B676B70E1EC2EB558B2ECE05C962003F4E21F27F26CF7A90A1C8404E1A45EE21AE105DE2E365D05A9366D55305E4477859DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B53B6397FCCD16708E3B5982BB2398B5617276F852FEC4E030F3970730251A6E6A2F6F710C77517FCB87C3314B3924F08CA515C397DD31921DBA956A902C261E3487DCDC98FC7A1A7699002B1C145DC79B6F99BBA4022982C2FE596B21C9F550E5B0D3FCBBEF3CDE4658C6992C076ABA650DC6DF7EA2A0D62A96012FF30F1336430752648E3FD92333C9ECBF17256E08722397ABDCABD112EA5F349FA4F138BEB4416F5067474E8B96127FC78F76FB24801CF5235CF67B5DB7DB4644351A4B6C3ED0F5D947FFF6729B1CB7E86DB557FE1C33A013EFA13ADBD5EF5C08B244F46CBBE735D36E13B5E59CF48D07C6B7EF3CDBDE16631FB924767F77050921EF6679ADD6891DFA0573CAF6D529D1C5EB275552E2FFB1CB8DDBFB91C39292BD3BC6BA265EB008369F93C1362FD1CA6F930CD92E3191F9FE3002E761B78B71A2CF5DE74334DD8311B4D6718EA2FD8FEB827B9AA53F501D778B3AF61040275049133E4318B5E0A00F9A1A47348017D048634C39B6804E248DC05C6194FE9A6DB682A2414098B06DDFAA6F3A80E1FE82E76C8512402E58563F20A63217A21ABE45B85C97F8B32916DF768BF13C78F121AB006B7C1E77B893FA0EEF10AB742111342B7BF7293AB3B2BD411FB9BA4C621722F8E7521B24D9D469751D6E957AC427D35BEA91213B89EABB375CC682B136E26D2C4410648E9405B84E982CC208DAA9DB5F7A3A882CB284D4545AAE713A1789090BEC925270DD6CF8592B18F877A8D4C4BC82808C0A9C6E100A24AB95EDC9B4EF95148ED483C51D410764068E3C635E4C75E155BE55796E01065A8653147371CDB4853474F3C89131966AA861037C62F9858137E57B2691635E509537C6D6311CA1CF58524D82F88F28163F6CFCD973731F705B2F8595FAFD54BE5681210AB83A99D7CEC266DE43E2C4C3D573E3A4A48E5C9E40B351B015320794A095DF5DFC0F0FE4C55CD4AD32DAEC7DC80A6A7145986070D4076894B628067922B2AFF966DA4B21066A5C2D00F2C596D26965821F554C43CC16D1E53882F32587B333ACE82C3CD7E6CF2991EB7B292FB59D27EBC89FAFFD5AB2ABCBBD5210DFF74A2F754FED15998CC28E39C8E007CDA4C886DFBF5D38CBDB09EE058721F2BB4B25220AC84A47403DB41EE37C33C60C28C9A2D222BF2AC39CF1103F937F19F0D51C8FFCF48C5A685E0DA6C18A2065A5E5549B9BCE651F6D5F7BDED95237A25E3D969E74C694F1732D66BDA029A4F5FFC1AC1477A3657E33AB496314A2BDC70C8FE915B1CA788AFBAFF904C8AD3BFCF6D86C42006583C890840A73BD2DB0498FE03B9EC9A4C417C554F78E35A70EDA774AC2C9F970170E5316FBBE2A9B13B1E5DC4982BA7A66739B08A07F271B93AC92F74A96102ABEC9B0A2E066256269ABE6352FB6AE065DA4DD73155BFE620F30BDA21AB8C8AD77169DB13A40C36E5F902520125D177DB351314FC382B123B56DC2C61A866E88EFBE147D9A7108D00204CB1762E41A979C427E4967B2703445943EEBF5188C7C395B67A53AD902F5C2002428393B39D4B70D80E26EC2B496C5456750E87FC448953747699A7F0E1A2963C5B650B7D4E2710F6858A6E9E21B186347B8E5F2DDA34E16B975877B7A92CA721FBF0B45A0C778A4CC262559B63E0DFCA1E3A2631BBE69190F3CDD17EEB70B57AA5ACDCE849DFC6889922FFB51E7BC0B0F8DEE67E07047C48F3EA4FC69218B7C2DAE5A08A06BFAB2896301B16D5AAA65F0469FDEA0C6BC8064D73E9431F144A4E95DBC647E51D42424EFF6BA0B36E487910362A831FCE67B8A0D94DD07175C01C5E35E1367708B6511021E791C664B4A48D70CFF59E57996F20C7CEBD851E7C0701E70F3AC7DDDA8DBC6AEA26234DCABFF6A20292811C9D2B486DB16B06429F809E3B0565A1B2687D49B272C855C9842019CAFE64C6B2D5331F051C266216F0B3244DD87E81CB360EA4CD43A88FB2BFFF44160E95E71C8A9995284244092843C5EB9DF200F784F0D1AC6403A5A08EF5D6E40C9B1624A8DC690BD732EC9210C73AC561B97E517D22DA87DA72E5AF505015D7E3F48E380A0C7E746D96BAD8D58B9420DA330FA38ECF8B1D50CE98080AFF4E73A966B2AB7E259E422DBDD0C1FF622143E2F8353AAEFB2A607F7606BC8BAE63B389A6FFC81C903AA0B8B90CD8E55B8CE97B3B286DF311330754538DA46064A49EF4029EFFB609895A77F80BD81F298CB7758D3035B5E072CD38003882A66A4C780FC9B7EDD9AB95787B580F7E4CF8AF93BE3EE7D124D0B58C9A1DD6A5E263FDFD6AF9F45F156E4EFC623DC301B80180112F61DDD166977C84DB616577FCD352DD25A2C6B5A786390B4C5A91878F44189F3D4CB766E3E552C5A019602F4D801A9CB16E2875C9AC212D1F060E41BF0066259F55737083BF412D6FFA24B81A608207D70BC2EBDB72025EA6468DC307ECCECD52FC8151489CB247EC4D4C930D73FC4EABC3F3554E4D0F13A72B7F26CBBB1F4367C2A9C1461373DE62249EE8746DA5099B3EB285CD1D9DC669CFAEB3F56DBAEF24FBF169B31E3566568D694AD538DC69AD544F9A127B5E79820B0E6A2E459F3D0B2C4B113B6B31536B2C3D26C0A50644FB20FB83FA6E71A2D4D79A8BD78867C63596C67E4C5049474194B079393B421B7D51607B8502667F2F3EA31CAD327A889C324B12B95FA9F2E809B934B358729FC37BC9757CFB068B9840C6BCB2543A72FB355063B05C19A92A5504A0A1FDB964C9206467A2C6687006C76167795E4CB23B47AE7F039BC2D3CCA7E754D0C6DC25354FB4845DE3C43D493079B0EEC573294F1D5302B79BD55C22B501A865F0DD1B603B86DBD956DA13B91D0B53F41B0FB1CCC506C9E1602E530033DCB41773FF2764CAD6746D3189253D80DCF2214B55B015D00CEE5162066FFF9D79C016D515DB1956C20C2A1C2AA6CB9E1786A00BC9A732798CEECFEFCA4BF9C4BF872683D5DC6BD2E7F5D61410EC50B98CBD86666859555C06C659570F0A265D10512D622B23F00ABFD6F524C84CC3693CEC9D6A175FB02C1B93453ABEC9C83D3F4CE638E0D503628C23329207E05967A879BDF214423D12586AE4323865422C66EE563AFA8CB81976B4B8CFF19909115F4C45F40122BC807578F72528B3291EC65C5149FCBEE795289BE4A1977B1242E267B7324F231D9898D3398386EDC3B4CE2242A446E2817024A4C0F7F11802399FCD96A7661039DC34681A30C9887A9B8249C80E3C3BD91D2582A7845E3439B89F59EF173415C6EF4F8A6AFD4F5F995CC160B4E21464585CB18DAC510E58CAA7D129FFC967178E2AE5C0783E0764A6AEF75CEB64AF9B4DBAEC430718E44DE572F34496C23C40C638E1CBFCC1E5DABFE2DD626C217E79996954F36C5C098BA911E4B535DED3860EE1F7C027B8A0DBE46BEBF6917C6C7D524C35D249288DF1C0D5EB4F4EB1EB0C52A57A922466BBE24EE88FB207ACB09324556AFB8D1F60B2621D164C19C8B04FAE91F7672E4952A51CC5AD98C5C34A4EDF1337E931B8DDF5358636CB8E503484C3F914AEAB416809B517ED6140190A56A24230DCF7A1899FF4F9890E7FFAFE12DD38E2ED0B28D0D434DA851FDDEACAB933276809FC2B7B9C043C6EAB4EAB15DAA9CD3AF48B5B6456AB3030C57E72649D20E42B7FD7AE12BB3F1E2C85867A240D842BC63454EAE17B2AA79059DBD2CB425AAFB415C730708BA565A7CD79B2673AD7C4789092898532A52B37A625D44A581D5C2B148887E17E9ABE62AE28EC7B3B4C3063FD8DE540AB62E8BA84824FC7BAAB8AD651BC900F90A559D5972CDFEB781E09E379908BDA4A162297BCD228682CF802CF7A0137CC08166D5227FD2B115596E3BD883BBF342813D94D42DB7CC3B1874229869D08F7B99B8503C7D7A263B18F666F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/YHDLCX+SFCompactRounded-Regular cguidfix
/F1.1/YHDLCX+SFCompactRounded-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 0 222 80 rc
-0.050000001 80 m
222.05 80 l
222.05 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
0 sc
1 0 0 -1 7.8063354 36.989174 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 4.0283203 m
(!")[ 3.987305 0.000000 ] xS
/F1.1[ 4.5 0 0 -4.5 0 0]sf
7.9833984 5.4755859 m
(#)s
1 0 0 -1 28.626343 54.07679 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 4.0283203 m
(")s
0 9.0859375 m
(!)s
1 0 0 -1 49.456345 45.009163 cm
0 4.0283203 m
(!)s
0 9.0859375 m
(")s
1 0 0 -1 70.276337 57.039162 cm
0 4.0283203 m
(!")[ 3.987305 0.000000 ] xS
/F1.1[ 4.5 0 0 -4.5 0 0]sf
7.9833984 5.4755859 m
(#)s
CM
65.029991 34.776661 m
65.629982 35.123363 l
72.269989 31.29627 l
72.269989 30.603754 l
65.029991 34.776661 l
h
f
66.680161 35.556847 m
66.979767 36.076675 l
72.419792 32.941216 l
72.120186 32.421387 l
66.680161 35.556847 l
h
f
78.909996 35.123363 m
79.509987 34.776661 l
72.269989 30.603754 l
72.269989 31.29627 l
78.909996 35.123363 l
h
f
65.029991 42.796741 m
65.329987 42.970001 l
65.629982 42.796867 l
65.629982 35.123363 l
65.029991 34.776661 l
65.029991 42.796741 l
h
f
78.909996 42.796867 m
79.509987 43.143135 l
79.509987 34.776661 l
78.909996 35.123363 l
78.909996 42.796867 l
h
f
77.410019 42.104336 m
78.01001 42.104336 l
78.01001 35.816761 l
77.410019 35.816761 l
77.410019 42.104336 l
h
f
58.380207 46.633537 m
58.379772 47.326485 l
65.32988 43.316414 l
65.329987 42.970001 l
65.029991 42.796741 l
58.380207 46.633537 l
h
f
71.969994 47.153145 m
72.269989 46.980011 l
72.269989 46.633537 l
65.629982 42.796867 l
65.329987 42.970001 l
65.32988 43.316414 l
71.969994 47.153145 l
h
f
72.119904 45.507393 m
72.420074 44.987888 l
66.980049 41.844582 l
66.679878 42.364086 l
72.119904 45.507393 l
h
f
54.595547 44.443562 m
54.295048 44.962875 l
58.379772 47.326485 l
58.380207 46.633537 l
54.595547 44.443562 l
h
f
72.269989 46.633537 m
72.269989 46.980011 l
72.569984 47.153145 l
79.509987 43.143135 l
78.909996 42.796867 l
72.269989 46.633537 l
h
f
44.500107 46.633598 m
44.499893 47.326424 l
48.621223 44.948494 l
48.321373 44.428806 l
44.500107 46.633598 l
h
f
37.559998 42.623528 m
37.559998 43.316475 l
44.499893 47.326424 l
44.500107 46.633598 l
37.559998 42.623528 l
h
f
71.969994 51.774174 m
72.569984 51.774174 l
72.569984 47.153145 l
72.269989 46.980011 l
71.969994 47.153145 l
71.969994 51.774174 l
h
f
33.43438 45.007355 m
33.734554 45.526859 l
37.559998 43.316475 l
37.559998 42.623528 l
33.43438 45.007355 l
h
f
9.7999878 58.663536 m
9.7999878 59.356483 l
17.039986 55.173134 l
16.439995 54.826866 l
9.7999878 58.663536 l
h
f
9.6499004 57.017887 m
9.9500751 57.537392 l
15.3901 54.394085 l
15.089926 53.87458 l
9.6499004 57.017887 l
h
f
17.039986 47.153145 m
16.73999 46.980011 l
16.439995 47.153145 l
16.439995 54.826866 l
17.039986 55.173134 l
17.039986 47.153145 l
h
f
23.679993 42.623528 m
23.679993 43.316475 l
27.426523 45.481262 l
27.726698 44.961758 l
23.679993 42.623528 l
h
f
16.73999 46.633537 m
16.73999 46.980011 l
17.039986 47.153145 l
23.679993 43.316475 l
23.679993 42.623528 l
16.73999 46.633537 l
h
f
3.1599808 54.826866 m
2.5599899 55.173134 l
9.7999878 59.356483 l
9.7999878 58.663536 l
3.1599808 54.826866 l
h
f
10.099983 42.796867 m
9.7999878 42.970001 l
9.7999878 43.316475 l
16.439995 47.153145 l
16.73999 46.980011 l
16.73999 46.633537 l
10.099983 42.796867 l
h
f
9.9500751 44.442619 m
9.6499004 44.962124 l
15.089926 48.105431 l
15.3901 47.585926 l
9.9500751 44.442619 l
h
f
3.1599808 47.153145 m
2.5599899 46.806877 l
2.5599899 55.173134 l
3.1599808 54.826866 l
3.1599808 47.153145 l
h
f
4.6599579 47.845676 m
4.059967 47.845676 l
4.059967 54.134335 l
4.6599579 54.134335 l
4.6599579 47.845676 l
h
f
2.5599899 46.806877 m
3.1599808 47.153145 l
9.7999878 43.316475 l
9.7999878 42.970001 l
9.4999924 42.796867 l
2.5599899 46.806877 l
h
f
10.099983 38.204159 m
9.4999924 38.204159 l
9.4999924 42.796867 l
9.7999878 42.970001 l
10.099983 42.796867 l
10.099983 38.204159 l
h
f
140.24007 44.680012 m
91.369995 44.680012 l
91.369995 45.28001 l
140.24007 45.28001 l
h
f
145.43999 44.980011 m
145.43999 44.980011 139.44008 43.430035 139.44008 43.430035 c
139.44008 43.430035 140.19006 44.301895 140.19006 44.980011 c
140.19006 45.68 139.44008 46.579987 139.44008 46.579987 c
139.44008 46.579987 145.43999 44.980011 145.43999 44.980011 c
145.43999 44.980011 145.43999 44.980011 145.43999 44.980011 c
h
f
1 0 0 -1 213.01634 38.179176 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 4.0283203 m
(!)s
1 0 0 -1 197.88634 20.89916 cm
0 4.0283203 m
(!)s
1 0 0 -1 183.83633 32.869164 cm
0 4.0283203 m
(!)s
0 9.0859375 m
(")s
1 0 0 -1 198.20128 33.880516 cm
0 5.0310059 m
($%)[ 3.357422 0.000000 ] xS
/F1.1[ 4.5 0 0 -4.5 0 0]sf
6.7265625 3.0212402 m
(&&)[ 1.103027 0.000000 ] xS
1 0 0 -1 185.33025 46.129173 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 4.0283203 m
("!)[ 3.996094 0.000000 ] xS
CM
187.64769 62.707561 m
186.97231 62.552448 l
190.74413 74.823677 l
191.21587 74.316338 l
187.64769 62.707561 l
h
f
195.92149 53.821224 m
195.81999 53.490005 l
195.46115 53.435177 l
186.97231 62.552448 l
187.64769 62.707561 l
195.92149 53.821224 l
h
f
196.80017 56.176304 m
196.36104 55.767452 l
189.62076 63.006725 l
190.05989 63.415577 l
196.80017 56.176304 l
h
f
207.74413 56.543541 m
207.98 56.290009 l
207.8719 55.957272 l
196.02817 53.230095 l
195.81999 53.490005 l
195.92149 53.821224 l
207.74413 56.543541 l
h
f
211.31227 68.142479 m
211.98772 68.297523 l
208.31577 56.361195 l
207.98 56.290009 l
207.74413 56.543541 l
211.31227 68.142479 l
h
f
208.83405 67.727631 m
209.4075 67.551216 l
206.50021 58.100544 l
205.92674 58.276958 l
208.83405 67.727631 l
h
f
203.03839 77.028893 m
203.24161 77.691109 l
211.98772 68.297523 l
211.31227 68.142479 l
203.03839 77.028893 l
h
f
203.24161 77.691109 m
203.03839 77.028893 l
191.21587 74.316338 l
190.74413 74.823677 l
203.24161 77.691109 l
h
f
202.31226 75.173851 m
202.44643 74.58905 l
192.81277 72.378708 l
192.6786 72.963501 l
202.31226 75.173851 l
h
f
217.20758 46.14645 m
215.01227 47.754555 l
207.8719 55.957272 l
207.98 56.290009 l
208.31577 56.361195 l
217.20758 46.14645 l
h
f
215.65965 39.330376 m
215.06319 39.395416 l
215.01227 47.754555 l
217.20758 46.14645 l
215.65965 39.330376 l
h
f
219.42702 25.053467 m
218.75298 25.146545 l
215.96512 32.690136 l
216.52791 32.898121 l
219.42702 25.053467 l
h
f
211.99268 14.823637 m
211.50732 15.176363 l
218.75298 25.146545 l
219.42702 25.053467 l
211.99268 14.823637 l
h
f
202.79929 17.595215 m
202.98483 18.165796 l
203.57663 18.045464 l
203.34866 17.344454 l
202.79929 17.595215 l
h
f
204.40437 16.862576 m
204.71384 17.814226 l
205.30563 17.693895 l
204.95375 16.611814 l
204.40437 16.862576 l
h
f
206.00946 16.129936 m
206.44284 17.462658 l
207.03462 17.342327 l
206.55882 15.879176 l
206.00946 16.129936 l
h
f
207.61453 15.397298 m
208.17184 17.11109 l
208.76363 16.990759 l
208.16391 15.146536 l
207.61453 15.397298 l
h
f
209.21962 14.664659 m
209.90085 16.759521 l
210.49263 16.639189 l
209.769 14.413897 l
209.21962 14.664659 l
h
f
189.06999 12.263473 m
189.06999 12.956529 l
196.71384 17.375957 l
197.01414 16.856535 l
189.06999 12.263473 l
h
f
178.25999 18.513474 m
178.25999 18.860001 l
178.56 19.033081 l
189.06999 12.956529 l
189.06999 12.263473 l
178.25999 18.513474 l
h
f
167.45007 12.263514 m
167.44992 12.956488 l
177.95999 19.033081 l
178.25999 18.860001 l
178.25999 18.513474 l
167.45007 12.263514 l
h
f
156.32999 18.68684 m
156.92999 19.033161 l
167.44992 12.956488 l
167.45007 12.263514 l
156.32999 18.68684 l
h
f
158.72911 19.89847 m
159.02922 20.418015 l
167.59953 15.467512 l
167.29942 14.947968 l
158.72911 19.89847 l
h
f
156.32999 31.513309 m
156.92999 31.166714 l
156.92999 19.033161 l
156.32999 18.68684 l
156.32999 31.513309 l
h
f
167.45007 37.92635 m
167.44992 37.233654 l
156.92999 31.166714 l
156.32999 31.513309 l
167.45007 37.92635 l
h
f
167.29961 35.244217 m
167.59935 34.724468 l
159.02814 29.781374 l
158.72839 30.301125 l
167.29961 35.244217 l
h
f
178.34966 31.634647 m
178.25999 31.340012 l
177.95999 31.166794 l
167.44992 37.233654 l
167.45007 37.92635 l
178.34966 31.634647 l
h
f
177.95999 31.166794 m
178.25999 31.340012 l
178.56 31.019125 l
178.56 19.033081 l
178.25999 18.860001 l
177.95999 19.033081 l
177.95999 31.166794 l
h
f
175.71359 30.042931 m
176.31358 30.042931 l
176.31358 20.156042 l
175.71359 20.156042 l
175.71359 30.042931 l
h
f
183.10674 31.31415 m
183.06641 30.715515 l
178.56 31.019125 l
178.25999 31.340012 l
178.28017 31.639328 l
183.10674 31.31415 l
h
f
197.24332 31.544495 m
197.26509 30.944899 l
196.66765 30.863556 l
196.64156 31.582306 l
197.24332 31.544495 l
h
f
195.19833 31.672993 m
195.2348 30.66847 l
194.63736 30.587128 l
194.59657 31.710804 l
195.19833 31.672993 l
h
f
193.15334 31.801491 m
193.2045 30.39204 l
192.60707 30.310699 l
192.55159 31.839302 l
193.15334 31.801491 l
h
f
191.10835 31.929987 m
191.17421 30.115612 l
190.57678 30.034269 l
190.50659 31.9678 l
191.10835 31.929987 l
h
f
189.06337 32.058487 m
189.14392 29.839184 l
188.54649 29.757841 l
188.46161 32.096298 l
189.06337 32.058487 l
h
f
208.08875 33.629513 m
207.9073 34.201412 l
211.83183 35.446472 l
212.01328 34.874573 l
208.08875 33.629513 l
h
f
199.57999 27.593311 m
200.17999 27.593311 l
200.17999 22.114147 l
199.57999 22.114147 l
199.57999 27.593311 l
h
f
192.37062 40.426105 m
194.31339 41.730423 l
198.38197 34.109489 l
197.88383 33.775051 l
192.37062 40.426105 l
h
f
193.14899 47.215809 m
192.6078 47.47488 l
195.46115 53.435177 l
195.81999 53.490005 l
196.02817 53.230095 l
193.14899 47.215809 l
h
f
1 0 0 -1 102.00792 61.537895 cm
4.392334 5.7128906 m
($%)[ 3.357422 0.000000 ] xS
/F1.1[ 4.5 0 0 -4.5 0 0]sf
11.118896 3.703125 m
(&&)[ 1.103027 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
13.324951 5.7128906 m
('\(\)*")[ 1.962891 3.216797 2.021484 3.849609 0.000000 ] xS
0 12.873047 m
(+,#-./0-1.)[ 3.251953 1.412109 3.243164 1.201172 5.080078 3.295898 1.438477 1.201172 3.416016 0.000000 ] xS
/F1.1[ 4.5 0 0 -4.5 0 0]sf
28.620117 10.863281 m
(23)[ 1.665527 0.000000 ] xS
1 0 0 -1 109.5596 42.967903 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 5.7128906 m
(3+-.4%)[ 3.304688 3.383789 1.201172 5.080078 1.461914 0.000000 ] xS
1 0 0 -1 184.44638 9.2621059 cm
0 5.7128906 m
(5&&6)[ 1.962891 1.470703 1.470703 0.000000 ] xS
1 0 0 -1 38.819408 27.602386 cm
0 5.7128906 m
(5&6)[ 1.962891 1.470703 0.000000 ] xS
ep
end
%%Trailer
%%EOF
